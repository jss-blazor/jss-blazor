@inherits JssComponentBase

@*
    The main layout (columns) of the styleguide.
    Navigation is automatically generated based on the components added to the layout,
    and does not need to be manually maintained.
*@
<div class="row">
    <div class="col-sm-8 col-lg-10">
        <Placeholder Name="jss-styleguide-layout" Rendering="@Component" />
    </div>
    <div class="col-sm-4 col-lg-2 order-sm-first pt-2">
        @foreach (var s in _sections)
        {
            <nav @key="@s.Heading" class="nav flex-column pt-2">
                @* Anchor navigation doesn't work with Blazor Assembly unless event.stopPropagation() is added to onclick *@
                @* @onclick:stopPropagation breaks the link functionality entirely *@
                <a href="@GetSectionLink(s)" class="nav-item font-weight-bold" onclick="event.stopPropagation();">
                    @s.Heading
                </a>
                @if (s.ShowChildren)
                {
                    <nav class="nav flex-column">
                        @foreach (var child in s.Children)
                        {
                            @* Anchor navigation doesn't work with Blazor Assembly unless event.stopPropagation() is added to onclick *@
                            @* @onclick:stopPropagation breaks the link functionality entirely *@
                            <a @key="child.Id" href="@GetSectionLink(child)" onclick="event.stopPropagation();">
                                @child.Heading
                            </a>
                        }
                    </nav>
                }
            </nav>
        }
    </div>
</div>

@code {
    private IEnumerable<Section> _sections;

    protected override void OnParametersSet()
    {
        // this code reads the components in the child placeholders of this component,
        // and projects them into the left navigation column for the styleguide
        _sections = GetSectionsFromPlaceholder(Component, "jss-styleguide-layout")
            .Select(section => MapSection(section, "jss-styleguide-section"));
    }

    private IEnumerable<IRendering> GetSectionsFromPlaceholder(IRendering rendering, string placeholderName)
    {
        return LayoutDataUtilities.GetChildPlaceholder(rendering, placeholderName)
            .Where(section => section.GetFieldValue("heading") != null);
    }

    private Section MapSection(IRendering rendering, string childPlaceholderName = null)
    {
        var section = new Section
        {
            Id = StyleguideUtilities.GetMarkupId(rendering),
            Heading = rendering.GetFieldValue("heading")
        };

        if (!string.IsNullOrWhiteSpace(childPlaceholderName))
        {
            section.Children = GetSectionsFromPlaceholder(rendering, childPlaceholderName)
                .Select(child => MapSection(child));
        }

        return section;
    }

    private static string GetSectionLink(Section section) => $"#{section.Id}";

    private class Section
    {
        public string Id { get; set; }
        public string Heading { get; set; }
        public IEnumerable<Section> Children { get; set; } = Enumerable.Empty<Section>();
        public bool ShowChildren => Children.Any();
    }
}
